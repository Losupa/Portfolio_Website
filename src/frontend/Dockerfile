
# Build step # 1: build the React front end

# Pulls and starts from official node image
# the version for alpine linux (which is smaller)
# and sets it as a build-step in the multi-stage build.
# We do multi-stage builds to optimize the Dockerfile
# but keeping it maintainable. First it installs Node.js
# and yarn to the container image and then uses them to
# build the app/build directory. Then after that is done,
# we don't need those any more so they are removed when
# we build and add NGINX to the container image.
FROM node:16-alpine as build-step
# Creates /app directory (if it does not already exist) and makes it the working
# directory so all RUN commands are launched from it by default
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app
# Adds node_modules folder to path
ENV PATH usr/src/app/node_modules/.bin:$PATH
# Copies package.json and yarn.lock from the host to the container inside
# the app folder, as well as all the files in the public and source folders
COPY package.json yarn.lock ./
COPY ./src ./src
COPY ./public ./public
# Installs all dependencies and build the client
# We use yarn instead of npm due to its cleaner look
# and improved performance
RUN yarn install
RUN yarn build

# Build Step #2 builds the NGINX container

# Pulls an official image of NGINX
FROM nginx:stable-alpine
# Copies the build folder generated by React
# to to share/nginx/html folder. Note this COPY command
# is used to bring files from the previous build step
# into the final container image (everything else is deleted)
COPY --from=build-step /usr/src/app/build /usr/share/nginx/html
# Copies nginx.conf from the host to etc/nginx/nginx.conf
COPY nginx.conf /etc/nginx/nginx.conf

# Runs NGINX on port 80
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]